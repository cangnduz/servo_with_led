
04_servo_uygulama.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b0c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002bc8  08002bc8  00003bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c5c  08002c5c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c5c  08002c5c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c5c  08002c5c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c5c  08002c5c  00003c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c60  08002c60  00003c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002c70  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002c70  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000971c  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c9  00000000  00000000  0000d750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0000f120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084b  00000000  00000000  0000fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017261  00000000  00000000  00010423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c43d  00000000  00000000  00027684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976b0  00000000  00000000  00033ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002624  00000000  00000000  000cb1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000cd7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002bb0 	.word	0x08002bb0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002bb0 	.word	0x08002bb0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 faa8 	bl	8000774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f860 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f992 	bl	8000550 <MX_GPIO_Init>
  MX_TIM1_Init();
 800022c:	f000 f8ba 	bl	80003a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000230:	4b26      	ldr	r3, [pc, #152]	@ (80002cc <main+0xb0>)
 8000232:	2100      	movs	r1, #0
 8000234:	0018      	movs	r0, r3
 8000236:	f001 fcb3 	bl	8001ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800023a:	4b24      	ldr	r3, [pc, #144]	@ (80002cc <main+0xb0>)
 800023c:	2104      	movs	r1, #4
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fcae 	bl	8001ba0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (angle == 0) {
 8000244:	4b22      	ldr	r3, [pc, #136]	@ (80002d0 <main+0xb4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d109      	bne.n	8000260 <main+0x44>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,500);
 800024c:	4b1f      	ldr	r3, [pc, #124]	@ (80002cc <main+0xb0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	22fa      	movs	r2, #250	@ 0xfa
 8000252:	0052      	lsls	r2, r2, #1
 8000254:	639a      	str	r2, [r3, #56]	@ 0x38
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,5000);
 8000256:	4b1d      	ldr	r3, [pc, #116]	@ (80002cc <main+0xb0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a1e      	ldr	r2, [pc, #120]	@ (80002d4 <main+0xb8>)
 800025c:	635a      	str	r2, [r3, #52]	@ 0x34
 800025e:	e018      	b.n	8000292 <main+0x76>

	}
	  else if (angle == 90) {
 8000260:	4b1b      	ldr	r3, [pc, #108]	@ (80002d0 <main+0xb4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b5a      	cmp	r3, #90	@ 0x5a
 8000266:	d108      	bne.n	800027a <main+0x5e>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500);
 8000268:	4b18      	ldr	r3, [pc, #96]	@ (80002cc <main+0xb0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1a      	ldr	r2, [pc, #104]	@ (80002d8 <main+0xbc>)
 800026e:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 10000);
 8000270:	4b16      	ldr	r3, [pc, #88]	@ (80002cc <main+0xb0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a19      	ldr	r2, [pc, #100]	@ (80002dc <main+0xc0>)
 8000276:	635a      	str	r2, [r3, #52]	@ 0x34
 8000278:	e00b      	b.n	8000292 <main+0x76>
	}
	  else if (angle == 180) {
 800027a:	4b15      	ldr	r3, [pc, #84]	@ (80002d0 <main+0xb4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000280:	d107      	bne.n	8000292 <main+0x76>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 2500);
 8000282:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <main+0xb0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a16      	ldr	r2, [pc, #88]	@ (80002e0 <main+0xc4>)
 8000288:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20000);
 800028a:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <main+0xb0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a15      	ldr	r2, [pc, #84]	@ (80002e4 <main+0xc8>)
 8000290:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	  HAL_Delay(1000);
 8000292:	23fa      	movs	r3, #250	@ 0xfa
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	0018      	movs	r0, r3
 8000298:	f000 faf2 	bl	8000880 <HAL_Delay>
	  if (angle == 0) {
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <main+0xb4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d103      	bne.n	80002ac <main+0x90>
		  angle = 90;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <main+0xb4>)
 80002a6:	225a      	movs	r2, #90	@ 0x5a
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	e7cb      	b.n	8000244 <main+0x28>

	}
	  else if (angle == 90 ) {
 80002ac:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <main+0xb4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b5a      	cmp	r3, #90	@ 0x5a
 80002b2:	d103      	bne.n	80002bc <main+0xa0>
		  angle =180;
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <main+0xb4>)
 80002b6:	22b4      	movs	r2, #180	@ 0xb4
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e7c3      	b.n	8000244 <main+0x28>


	}
	  else if (angle == 180) {
 80002bc:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <main+0xb4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2bb4      	cmp	r3, #180	@ 0xb4
 80002c2:	d1bf      	bne.n	8000244 <main+0x28>
		  angle =0;
 80002c4:	4b02      	ldr	r3, [pc, #8]	@ (80002d0 <main+0xb4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
	  if (angle == 0) {
 80002ca:	e7bb      	b.n	8000244 <main+0x28>
 80002cc:	20000028 	.word	0x20000028
 80002d0:	20000074 	.word	0x20000074
 80002d4:	00001388 	.word	0x00001388
 80002d8:	000005dc 	.word	0x000005dc
 80002dc:	00002710 	.word	0x00002710
 80002e0:	000009c4 	.word	0x000009c4
 80002e4:	00004e20 	.word	0x00004e20

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b093      	sub	sp, #76	@ 0x4c
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2410      	movs	r4, #16
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2338      	movs	r3, #56	@ 0x38
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f002 fc2d 	bl	8002b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	003b      	movs	r3, r7
 8000300:	0018      	movs	r0, r3
 8000302:	2310      	movs	r3, #16
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f002 fc26 	bl	8002b58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800030c:	2380      	movs	r3, #128	@ 0x80
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fcf1 	bl	8000cf8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	193b      	adds	r3, r7, r4
 8000318:	2202      	movs	r2, #2
 800031a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	193b      	adds	r3, r7, r4
 800031e:	2280      	movs	r2, #128	@ 0x80
 8000320:	0052      	lsls	r2, r2, #1
 8000322:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000324:	0021      	movs	r1, r4
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2240      	movs	r2, #64	@ 0x40
 8000330:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2202      	movs	r2, #2
 8000336:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2202      	movs	r2, #2
 800033c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2200      	movs	r2, #0
 8000342:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2208      	movs	r2, #8
 8000348:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2280      	movs	r2, #128	@ 0x80
 800034e:	0292      	lsls	r2, r2, #10
 8000350:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	22c0      	movs	r2, #192	@ 0xc0
 8000356:	04d2      	lsls	r2, r2, #19
 8000358:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	0592      	lsls	r2, r2, #22
 8000360:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	187b      	adds	r3, r7, r1
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fd07 	bl	8000d78 <HAL_RCC_OscConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800036e:	f000 f905 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	003b      	movs	r3, r7
 8000374:	2207      	movs	r2, #7
 8000376:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	003b      	movs	r3, r7
 800037a:	2202      	movs	r2, #2
 800037c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	003b      	movs	r3, r7
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000384:	003b      	movs	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038a:	003b      	movs	r3, r7
 800038c:	2102      	movs	r1, #2
 800038e:	0018      	movs	r0, r3
 8000390:	f001 f80c 	bl	80013ac <HAL_RCC_ClockConfig>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000398:	f000 f8f0 	bl	800057c <Error_Handler>
  }
}
 800039c:	46c0      	nop			@ (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b013      	add	sp, #76	@ 0x4c
 80003a2:	bd90      	pop	{r4, r7, pc}

080003a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b09c      	sub	sp, #112	@ 0x70
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	2360      	movs	r3, #96	@ 0x60
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	0018      	movs	r0, r3
 80003b0:	2310      	movs	r3, #16
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f002 fbcf 	bl	8002b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ba:	2354      	movs	r3, #84	@ 0x54
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	230c      	movs	r3, #12
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f002 fbc7 	bl	8002b58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ca:	2338      	movs	r3, #56	@ 0x38
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	0018      	movs	r0, r3
 80003d0:	231c      	movs	r3, #28
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f002 fbbf 	bl	8002b58 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	0018      	movs	r0, r3
 80003de:	2334      	movs	r3, #52	@ 0x34
 80003e0:	001a      	movs	r2, r3
 80003e2:	2100      	movs	r1, #0
 80003e4:	f002 fbb8 	bl	8002b58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003e8:	4b56      	ldr	r3, [pc, #344]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 80003ea:	4a57      	ldr	r2, [pc, #348]	@ (8000548 <MX_TIM1_Init+0x1a4>)
 80003ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63 ;
 80003ee:	4b55      	ldr	r3, [pc, #340]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 80003f0:	223f      	movs	r2, #63	@ 0x3f
 80003f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	4b53      	ldr	r3, [pc, #332]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80003fa:	4b52      	ldr	r3, [pc, #328]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 80003fc:	4a53      	ldr	r2, [pc, #332]	@ (800054c <MX_TIM1_Init+0x1a8>)
 80003fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000400:	4b50      	ldr	r3, [pc, #320]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000406:	4b4f      	ldr	r3, [pc, #316]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040c:	4b4d      	ldr	r3, [pc, #308]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 800040e:	2200      	movs	r2, #0
 8000410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000412:	4b4c      	ldr	r3, [pc, #304]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fb0b 	bl	8001a30 <HAL_TIM_Base_Init>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800041e:	f000 f8ad 	bl	800057c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000422:	2160      	movs	r1, #96	@ 0x60
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2280      	movs	r2, #128	@ 0x80
 8000428:	0152      	lsls	r2, r2, #5
 800042a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800042c:	187a      	adds	r2, r7, r1
 800042e:	4b45      	ldr	r3, [pc, #276]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 8000430:	0011      	movs	r1, r2
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fd9e 	bl	8001f74 <HAL_TIM_ConfigClockSource>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800043c:	f000 f89e 	bl	800057c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000440:	4b40      	ldr	r3, [pc, #256]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 8000442:	0018      	movs	r0, r3
 8000444:	f001 fb4c 	bl	8001ae0 <HAL_TIM_PWM_Init>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800044c:	f000 f896 	bl	800057c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000450:	2154      	movs	r1, #84	@ 0x54
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000464:	187a      	adds	r2, r7, r1
 8000466:	4b37      	ldr	r3, [pc, #220]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 8000468:	0011      	movs	r1, r2
 800046a:	0018      	movs	r0, r3
 800046c:	f002 fa6a 	bl	8002944 <HAL_TIMEx_MasterConfigSynchronization>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000474:	f000 f882 	bl	800057c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000478:	2138      	movs	r1, #56	@ 0x38
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2260      	movs	r2, #96	@ 0x60
 800047e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	4b27      	ldr	r3, [pc, #156]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fc62 	bl	8001d74 <HAL_TIM_PWM_ConfigChannel>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80004b4:	f000 f862 	bl	800057c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004b8:	2338      	movs	r3, #56	@ 0x38
 80004ba:	18f9      	adds	r1, r7, r3
 80004bc:	4b21      	ldr	r3, [pc, #132]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 80004be:	2204      	movs	r2, #4
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fc57 	bl	8001d74 <HAL_TIM_PWM_ConfigChannel>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80004ca:	f000 f857 	bl	800057c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2280      	movs	r2, #128	@ 0x80
 80004f0:	0192      	lsls	r2, r2, #6
 80004f2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	0492      	lsls	r2, r2, #18
 800050c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2200      	movs	r2, #0
 800051e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000520:	1d3a      	adds	r2, r7, #4
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 8000524:	0011      	movs	r1, r2
 8000526:	0018      	movs	r0, r3
 8000528:	f002 fa7a 	bl	8002a20 <HAL_TIMEx_ConfigBreakDeadTime>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000530:	f000 f824 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000534:	4b03      	ldr	r3, [pc, #12]	@ (8000544 <MX_TIM1_Init+0x1a0>)
 8000536:	0018      	movs	r0, r3
 8000538:	f000 f880 	bl	800063c <HAL_TIM_MspPostInit>

}
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b01c      	add	sp, #112	@ 0x70
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000028 	.word	0x20000028
 8000548:	40012c00 	.word	0x40012c00
 800054c:	00004e20 	.word	0x00004e20

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <MX_GPIO_Init+0x28>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <MX_GPIO_Init+0x28>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	@ 0x34
 8000562:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <MX_GPIO_Init+0x28>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	e7fd      	b.n	8000584 <Error_Handler+0x8>

08000588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <HAL_MspInit+0x44>)
 8000590:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <HAL_MspInit+0x44>)
 8000594:	2101      	movs	r1, #1
 8000596:	430a      	orrs	r2, r1
 8000598:	641a      	str	r2, [r3, #64]	@ 0x40
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <HAL_MspInit+0x44>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059e:	2201      	movs	r2, #1
 80005a0:	4013      	ands	r3, r2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <HAL_MspInit+0x44>)
 80005a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <HAL_MspInit+0x44>)
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	0549      	lsls	r1, r1, #21
 80005b0:	430a      	orrs	r2, r1
 80005b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <HAL_MspInit+0x44>)
 80005b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	055b      	lsls	r3, r3, #21
 80005bc:	4013      	ands	r3, r2
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b091      	sub	sp, #68	@ 0x44
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d8:	240c      	movs	r4, #12
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	0018      	movs	r0, r3
 80005de:	2334      	movs	r3, #52	@ 0x34
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f002 fab8 	bl	8002b58 <memset>
  if(htim_base->Instance==TIM1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a11      	ldr	r2, [pc, #68]	@ (8000634 <HAL_TIM_Base_MspInit+0x64>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d11c      	bne.n	800062c <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	0392      	lsls	r2, r2, #14
 80005f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2200      	movs	r2, #0
 80005fe:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	f001 f85c 	bl	80016c0 <HAL_RCCEx_PeriphCLKConfig>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800060c:	f7ff ffb6 	bl	800057c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <HAL_TIM_Base_MspInit+0x68>)
 8000612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <HAL_TIM_Base_MspInit+0x68>)
 8000616:	2180      	movs	r1, #128	@ 0x80
 8000618:	0109      	lsls	r1, r1, #4
 800061a:	430a      	orrs	r2, r1
 800061c:	641a      	str	r2, [r3, #64]	@ 0x40
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <HAL_TIM_Base_MspInit+0x68>)
 8000620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000622:	2380      	movs	r3, #128	@ 0x80
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4013      	ands	r3, r2
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b011      	add	sp, #68	@ 0x44
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40012c00 	.word	0x40012c00
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b089      	sub	sp, #36	@ 0x24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	240c      	movs	r4, #12
 8000646:	193b      	adds	r3, r7, r4
 8000648:	0018      	movs	r0, r3
 800064a:	2314      	movs	r3, #20
 800064c:	001a      	movs	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f002 fa82 	bl	8002b58 <memset>
  if(htim->Instance==TIM1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <HAL_TIM_MspPostInit+0xa0>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d13a      	bne.n	80006d4 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <HAL_TIM_MspPostInit+0xa4>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <HAL_TIM_MspPostInit+0xa4>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <HAL_TIM_MspPostInit+0xa4>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2202      	movs	r2, #2
 8000682:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2202      	movs	r2, #2
 8000694:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	193a      	adds	r2, r7, r4
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f9c6 	bl	8000a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	0092      	lsls	r2, r2, #2
 80006ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2202      	movs	r2, #2
 80006b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2202      	movs	r2, #2
 80006c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	187a      	adds	r2, r7, r1
 80006c8:	23a0      	movs	r3, #160	@ 0xa0
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 f9ae 	bl	8000a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b009      	add	sp, #36	@ 0x24
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	40012c00 	.word	0x40012c00
 80006e0:	40021000 	.word	0x40021000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	e7fd      	b.n	80006e8 <NMI_Handler+0x4>

080006ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	e7fd      	b.n	80006f0 <HardFault_Handler+0x4>

080006f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f89c 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	46c0      	nop			@ (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000722:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000724:	f7ff fff7 	bl	8000716 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480c      	ldr	r0, [pc, #48]	@ (800075c <LoopForever+0x6>)
  ldr r1, =_edata
 800072a:	490d      	ldr	r1, [pc, #52]	@ (8000760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800072c:	4a0d      	ldr	r2, [pc, #52]	@ (8000764 <LoopForever+0xe>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	@ (8000768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000740:	4c0a      	ldr	r4, [pc, #40]	@ (800076c <LoopForever+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800074e:	f002 fa0b 	bl	8002b68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000752:	f7ff fd63 	bl	800021c <main>

08000756 <LoopForever>:

LoopForever:
  b LoopForever
 8000756:	e7fe      	b.n	8000756 <LoopForever>
  ldr   r0, =_estack
 8000758:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000764:	08002c64 	.word	0x08002c64
  ldr r2, =_sbss
 8000768:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800076c:	2000007c 	.word	0x2000007c

08000770 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_COMP_IRQHandler>
	...

08000774 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <HAL_Init+0x3c>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <HAL_Init+0x3c>)
 8000786:	2180      	movs	r1, #128	@ 0x80
 8000788:	0049      	lsls	r1, r1, #1
 800078a:	430a      	orrs	r2, r1
 800078c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f810 	bl	80007b4 <HAL_InitTick>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d003      	beq.n	80007a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e001      	b.n	80007a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff fef2 	bl	8000588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007bc:	230f      	movs	r3, #15
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <HAL_InitTick+0x88>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d02b      	beq.n	8000824 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <HAL_InitTick+0x8c>)
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <HAL_InitTick+0x88>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0019      	movs	r1, r3
 80007d6:	23fa      	movs	r3, #250	@ 0xfa
 80007d8:	0098      	lsls	r0, r3, #2
 80007da:	f7ff fc93 	bl	8000104 <__udivsi3>
 80007de:	0003      	movs	r3, r0
 80007e0:	0019      	movs	r1, r3
 80007e2:	0020      	movs	r0, r4
 80007e4:	f7ff fc8e 	bl	8000104 <__udivsi3>
 80007e8:	0003      	movs	r3, r0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 f913 	bl	8000a16 <HAL_SYSTICK_Config>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d112      	bne.n	800081a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d80a      	bhi.n	8000810 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	425b      	negs	r3, r3
 8000800:	2200      	movs	r2, #0
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f8f2 	bl	80009ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000808:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <HAL_InitTick+0x90>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	e00d      	b.n	800082c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000810:	230f      	movs	r3, #15
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e008      	b.n	800082c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800081a:	230f      	movs	r3, #15
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e003      	b.n	800082c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800082c:	230f      	movs	r3, #15
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781b      	ldrb	r3, [r3, #0]
}
 8000832:	0018      	movs	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	b005      	add	sp, #20
 8000838:	bd90      	pop	{r4, r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	20000008 	.word	0x20000008
 8000840:	20000000 	.word	0x20000000
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <HAL_IncTick+0x1c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	001a      	movs	r2, r3
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <HAL_IncTick+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	18d2      	adds	r2, r2, r3
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <HAL_IncTick+0x20>)
 800085a:	601a      	str	r2, [r3, #0]
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	20000008 	.word	0x20000008
 8000868:	20000078 	.word	0x20000078

0800086c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b02      	ldr	r3, [pc, #8]	@ (800087c <HAL_GetTick+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	0018      	movs	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	20000078 	.word	0x20000078

08000880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000888:	f7ff fff0 	bl	800086c <HAL_GetTick>
 800088c:	0003      	movs	r3, r0
 800088e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	3301      	adds	r3, #1
 8000898:	d005      	beq.n	80008a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <HAL_Delay+0x44>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	001a      	movs	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	189b      	adds	r3, r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	f7ff ffe0 	bl	800086c <HAL_GetTick>
 80008ac:	0002      	movs	r2, r0
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d8f7      	bhi.n	80008a8 <HAL_Delay+0x28>
  {
  }
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b004      	add	sp, #16
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	20000008 	.word	0x20000008

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b7f      	cmp	r3, #127	@ 0x7f
 80008dc:	d828      	bhi.n	8000930 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008de:	4a2f      	ldr	r2, [pc, #188]	@ (800099c <__NVIC_SetPriority+0xd4>)
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	33c0      	adds	r3, #192	@ 0xc0
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	589b      	ldr	r3, [r3, r2]
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	0011      	movs	r1, r2
 80008f4:	2203      	movs	r2, #3
 80008f6:	400a      	ands	r2, r1
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	21ff      	movs	r1, #255	@ 0xff
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	43d2      	mvns	r2, r2
 8000902:	401a      	ands	r2, r3
 8000904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	22ff      	movs	r2, #255	@ 0xff
 800090c:	401a      	ands	r2, r3
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0018      	movs	r0, r3
 8000914:	2303      	movs	r3, #3
 8000916:	4003      	ands	r3, r0
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	481f      	ldr	r0, [pc, #124]	@ (800099c <__NVIC_SetPriority+0xd4>)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	430a      	orrs	r2, r1
 8000928:	33c0      	adds	r3, #192	@ 0xc0
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800092e:	e031      	b.n	8000994 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	4a1b      	ldr	r2, [pc, #108]	@ (80009a0 <__NVIC_SetPriority+0xd8>)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	0019      	movs	r1, r3
 8000938:	230f      	movs	r3, #15
 800093a:	400b      	ands	r3, r1
 800093c:	3b08      	subs	r3, #8
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	3306      	adds	r3, #6
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	3304      	adds	r3, #4
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1dfa      	adds	r2, r7, #7
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	0011      	movs	r1, r2
 8000950:	2203      	movs	r2, #3
 8000952:	400a      	ands	r2, r1
 8000954:	00d2      	lsls	r2, r2, #3
 8000956:	21ff      	movs	r1, #255	@ 0xff
 8000958:	4091      	lsls	r1, r2
 800095a:	000a      	movs	r2, r1
 800095c:	43d2      	mvns	r2, r2
 800095e:	401a      	ands	r2, r3
 8000960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	019b      	lsls	r3, r3, #6
 8000966:	22ff      	movs	r2, #255	@ 0xff
 8000968:	401a      	ands	r2, r3
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	0018      	movs	r0, r3
 8000970:	2303      	movs	r3, #3
 8000972:	4003      	ands	r3, r0
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <__NVIC_SetPriority+0xd8>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	001c      	movs	r4, r3
 8000980:	230f      	movs	r3, #15
 8000982:	4023      	ands	r3, r4
 8000984:	3b08      	subs	r3, #8
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	430a      	orrs	r2, r1
 800098a:	3306      	adds	r3, #6
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	18c3      	adds	r3, r0, r3
 8000990:	3304      	adds	r3, #4
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b003      	add	sp, #12
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	2380      	movs	r3, #128	@ 0x80
 80009b2:	045b      	lsls	r3, r3, #17
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d301      	bcc.n	80009bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b8:	2301      	movs	r3, #1
 80009ba:	e010      	b.n	80009de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <SysTick_Config+0x44>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	3a01      	subs	r2, #1
 80009c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c4:	2301      	movs	r3, #1
 80009c6:	425b      	negs	r3, r3
 80009c8:	2103      	movs	r1, #3
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff ff7c 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <SysTick_Config+0x44>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <SysTick_Config+0x44>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	210f      	movs	r1, #15
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	1c02      	adds	r2, r0, #0
 80009fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ff5d 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b004      	add	sp, #16
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff ffbf 	bl	80009a4 <SysTick_Config>
 8000a26:	0003      	movs	r3, r0
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3e:	e147      	b.n	8000cd0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2101      	movs	r1, #1
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d100      	bne.n	8000a58 <HAL_GPIO_Init+0x28>
 8000a56:	e138      	b.n	8000cca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d005      	beq.n	8000a70 <HAL_GPIO_Init+0x40>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2203      	movs	r2, #3
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d130      	bne.n	8000ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	0013      	movs	r3, r2
 8000a80:	43da      	mvns	r2, r3
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	409a      	lsls	r2, r3
 8000a92:	0013      	movs	r3, r2
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	091b      	lsrs	r3, r3, #4
 8000abc:	2201      	movs	r2, #1
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d017      	beq.n	8000b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	43da      	mvns	r2, r3
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	409a      	lsls	r2, r3
 8000b00:	0013      	movs	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2203      	movs	r2, #3
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d123      	bne.n	8000b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	08da      	lsrs	r2, r3, #3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3208      	adds	r2, #8
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	58d3      	ldr	r3, [r2, r3]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	220f      	movs	r2, #15
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	2107      	movs	r1, #7
 8000b46:	400b      	ands	r3, r1
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	08da      	lsrs	r2, r3, #3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	6939      	ldr	r1, [r7, #16]
 8000b60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	43da      	mvns	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2203      	movs	r2, #3
 8000b80:	401a      	ands	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	23c0      	movs	r3, #192	@ 0xc0
 8000b9c:	029b      	lsls	r3, r3, #10
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d100      	bne.n	8000ba4 <HAL_GPIO_Init+0x174>
 8000ba2:	e092      	b.n	8000cca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ba4:	4a50      	ldr	r2, [pc, #320]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3318      	adds	r3, #24
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	589b      	ldr	r3, [r3, r2]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	220f      	movs	r2, #15
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	23a0      	movs	r3, #160	@ 0xa0
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0x1ca>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a45      	ldr	r2, [pc, #276]	@ (8000cec <HAL_GPIO_Init+0x2bc>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00d      	beq.n	8000bf6 <HAL_GPIO_Init+0x1c6>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a44      	ldr	r2, [pc, #272]	@ (8000cf0 <HAL_GPIO_Init+0x2c0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d007      	beq.n	8000bf2 <HAL_GPIO_Init+0x1c2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a43      	ldr	r2, [pc, #268]	@ (8000cf4 <HAL_GPIO_Init+0x2c4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_GPIO_Init+0x1be>
 8000bea:	2303      	movs	r3, #3
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x1cc>
 8000bee:	2305      	movs	r3, #5
 8000bf0:	e004      	b.n	8000bfc <HAL_GPIO_Init+0x1cc>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e002      	b.n	8000bfc <HAL_GPIO_Init+0x1cc>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x1cc>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	2103      	movs	r1, #3
 8000c00:	400a      	ands	r2, r1
 8000c02:	00d2      	lsls	r2, r2, #3
 8000c04:	4093      	lsls	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c0c:	4936      	ldr	r1, [pc, #216]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3318      	adds	r3, #24
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	2380      	movs	r3, #128	@ 0x80
 8000c30:	035b      	lsls	r3, r3, #13
 8000c32:	4013      	ands	r3, r2
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000c44:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	039b      	lsls	r3, r3, #14
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000c70:	2384      	movs	r3, #132	@ 0x84
 8000c72:	58d3      	ldr	r3, [r2, r3]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	2380      	movs	r3, #128	@ 0x80
 8000c86:	029b      	lsls	r3, r3, #10
 8000c88:	4013      	ands	r3, r2
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c94:	4914      	ldr	r1, [pc, #80]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000c96:	2284      	movs	r2, #132	@ 0x84
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000c9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	2380      	movs	r3, #128	@ 0x80
 8000ca0:	58d3      	ldr	r3, [r2, r3]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cc2:	4909      	ldr	r1, [pc, #36]	@ (8000ce8 <HAL_GPIO_Init+0x2b8>)
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	1e13      	subs	r3, r2, #0
 8000cda:	d000      	beq.n	8000cde <HAL_GPIO_Init+0x2ae>
 8000cdc:	e6b0      	b.n	8000a40 <HAL_GPIO_Init+0x10>
  }
}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b006      	add	sp, #24
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021800 	.word	0x40021800
 8000cec:	50000400 	.word	0x50000400
 8000cf0:	50000800 	.word	0x50000800
 8000cf4:	50000c00 	.word	0x50000c00

08000cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000d00:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	0019      	movs	r1, r3
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d11f      	bne.n	8000d5c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	0013      	movs	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	189b      	adds	r3, r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4912      	ldr	r1, [pc, #72]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff f9ea 	bl	8000104 <__udivsi3>
 8000d30:	0003      	movs	r3, r0
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d36:	e008      	b.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e001      	b.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e009      	b.n	8000d5e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	2380      	movs	r3, #128	@ 0x80
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	401a      	ands	r2, r3
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d0ed      	beq.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b004      	add	sp, #16
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	40007000 	.word	0x40007000
 8000d6c:	fffff9ff 	.word	0xfffff9ff
 8000d70:	20000000 	.word	0x20000000
 8000d74:	000f4240 	.word	0x000f4240

08000d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e2fe      	b.n	8001388 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4013      	ands	r3, r2
 8000d92:	d100      	bne.n	8000d96 <HAL_RCC_OscConfig+0x1e>
 8000d94:	e07c      	b.n	8000e90 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d96:	4bc3      	ldr	r3, [pc, #780]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2238      	movs	r2, #56	@ 0x38
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000da0:	4bc0      	ldr	r3, [pc, #768]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	2203      	movs	r2, #3
 8000da6:	4013      	ands	r3, r2
 8000da8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b10      	cmp	r3, #16
 8000dae:	d102      	bne.n	8000db6 <HAL_RCC_OscConfig+0x3e>
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d002      	beq.n	8000dbc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	d10b      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbc:	4bb9      	ldr	r3, [pc, #740]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	029b      	lsls	r3, r3, #10
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d062      	beq.n	8000e8e <HAL_RCC_OscConfig+0x116>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d15e      	bne.n	8000e8e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e2d9      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	025b      	lsls	r3, r3, #9
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d107      	bne.n	8000df0 <HAL_RCC_OscConfig+0x78>
 8000de0:	4bb0      	ldr	r3, [pc, #704]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4baf      	ldr	r3, [pc, #700]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000de6:	2180      	movs	r1, #128	@ 0x80
 8000de8:	0249      	lsls	r1, r1, #9
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e020      	b.n	8000e32 <HAL_RCC_OscConfig+0xba>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	23a0      	movs	r3, #160	@ 0xa0
 8000df6:	02db      	lsls	r3, r3, #11
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d10e      	bne.n	8000e1a <HAL_RCC_OscConfig+0xa2>
 8000dfc:	4ba9      	ldr	r3, [pc, #676]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4ba8      	ldr	r3, [pc, #672]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e02:	2180      	movs	r1, #128	@ 0x80
 8000e04:	02c9      	lsls	r1, r1, #11
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	4ba6      	ldr	r3, [pc, #664]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4ba5      	ldr	r3, [pc, #660]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0249      	lsls	r1, r1, #9
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e00b      	b.n	8000e32 <HAL_RCC_OscConfig+0xba>
 8000e1a:	4ba2      	ldr	r3, [pc, #648]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4ba1      	ldr	r3, [pc, #644]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e20:	49a1      	ldr	r1, [pc, #644]	@ (80010a8 <HAL_RCC_OscConfig+0x330>)
 8000e22:	400a      	ands	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	4b9f      	ldr	r3, [pc, #636]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b9e      	ldr	r3, [pc, #632]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e2c:	499f      	ldr	r1, [pc, #636]	@ (80010ac <HAL_RCC_OscConfig+0x334>)
 8000e2e:	400a      	ands	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d014      	beq.n	8000e64 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fd17 	bl	800086c <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fd12 	bl	800086c <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	@ 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e298      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e56:	4b93      	ldr	r3, [pc, #588]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	029b      	lsls	r3, r3, #10
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d0f0      	beq.n	8000e44 <HAL_RCC_OscConfig+0xcc>
 8000e62:	e015      	b.n	8000e90 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e64:	f7ff fd02 	bl	800086c <HAL_GetTick>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e6e:	f7ff fcfd 	bl	800086c <HAL_GetTick>
 8000e72:	0002      	movs	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b64      	cmp	r3, #100	@ 0x64
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e283      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e80:	4b88      	ldr	r3, [pc, #544]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	029b      	lsls	r3, r3, #10
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d1f0      	bne.n	8000e6e <HAL_RCC_OscConfig+0xf6>
 8000e8c:	e000      	b.n	8000e90 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2202      	movs	r2, #2
 8000e96:	4013      	ands	r3, r2
 8000e98:	d100      	bne.n	8000e9c <HAL_RCC_OscConfig+0x124>
 8000e9a:	e099      	b.n	8000fd0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e9c:	4b81      	ldr	r3, [pc, #516]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2238      	movs	r2, #56	@ 0x38
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	4013      	ands	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d102      	bne.n	8000ebc <HAL_RCC_OscConfig+0x144>
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d002      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d135      	bne.n	8000f2e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ec2:	4b78      	ldr	r3, [pc, #480]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	2380      	movs	r3, #128	@ 0x80
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d005      	beq.n	8000eda <HAL_RCC_OscConfig+0x162>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e256      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eda:	4b72      	ldr	r3, [pc, #456]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4a74      	ldr	r2, [pc, #464]	@ (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	021a      	lsls	r2, r3, #8
 8000eea:	4b6e      	ldr	r3, [pc, #440]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	430a      	orrs	r2, r1
 8000eee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d112      	bne.n	8000f1c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a6e      	ldr	r2, [pc, #440]	@ (80010b4 <HAL_RCC_OscConfig+0x33c>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	4b67      	ldr	r3, [pc, #412]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000f0a:	4b66      	ldr	r3, [pc, #408]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	0adb      	lsrs	r3, r3, #11
 8000f10:	2207      	movs	r2, #7
 8000f12:	4013      	ands	r3, r2
 8000f14:	4a68      	ldr	r2, [pc, #416]	@ (80010b8 <HAL_RCC_OscConfig+0x340>)
 8000f16:	40da      	lsrs	r2, r3
 8000f18:	4b68      	ldr	r3, [pc, #416]	@ (80010bc <HAL_RCC_OscConfig+0x344>)
 8000f1a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f1c:	4b68      	ldr	r3, [pc, #416]	@ (80010c0 <HAL_RCC_OscConfig+0x348>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff fc47 	bl	80007b4 <HAL_InitTick>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d051      	beq.n	8000fce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e22c      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d030      	beq.n	8000f98 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f36:	4b5b      	ldr	r3, [pc, #364]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a5e      	ldr	r2, [pc, #376]	@ (80010b4 <HAL_RCC_OscConfig+0x33c>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	0019      	movs	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	4b57      	ldr	r3, [pc, #348]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000f4a:	4b56      	ldr	r3, [pc, #344]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f50:	2180      	movs	r1, #128	@ 0x80
 8000f52:	0049      	lsls	r1, r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f58:	f7ff fc88 	bl	800086c <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f62:	f7ff fc83 	bl	800086c <HAL_GetTick>
 8000f66:	0002      	movs	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e209      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f74:	4b4b      	ldr	r3, [pc, #300]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f80:	4b48      	ldr	r3, [pc, #288]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a4a      	ldr	r2, [pc, #296]	@ (80010b0 <HAL_RCC_OscConfig+0x338>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	021a      	lsls	r2, r3, #8
 8000f90:	4b44      	ldr	r3, [pc, #272]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	430a      	orrs	r2, r1
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	e01b      	b.n	8000fd0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f98:	4b42      	ldr	r3, [pc, #264]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b41      	ldr	r3, [pc, #260]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	4949      	ldr	r1, [pc, #292]	@ (80010c4 <HAL_RCC_OscConfig+0x34c>)
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fc62 	bl	800086c <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc5d 	bl	800086c <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e1e3      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc0:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d1f0      	bne.n	8000fae <HAL_RCC_OscConfig+0x236>
 8000fcc:	e000      	b.n	8000fd0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d047      	beq.n	800106a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000fda:	4b32      	ldr	r3, [pc, #200]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2238      	movs	r2, #56	@ 0x38
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b18      	cmp	r3, #24
 8000fe4:	d10a      	bne.n	8000ffc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d03c      	beq.n	800106a <HAL_RCC_OscConfig+0x2f2>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d138      	bne.n	800106a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e1c5      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d019      	beq.n	8001038 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001004:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8001006:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001008:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 800100a:	2101      	movs	r1, #1
 800100c:	430a      	orrs	r2, r1
 800100e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fc2c 	bl	800086c <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800101a:	f7ff fc27 	bl	800086c <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e1ad      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800102c:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 800102e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001030:	2202      	movs	r2, #2
 8001032:	4013      	ands	r3, r2
 8001034:	d0f1      	beq.n	800101a <HAL_RCC_OscConfig+0x2a2>
 8001036:	e018      	b.n	800106a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 800103a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800103c:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 800103e:	2101      	movs	r1, #1
 8001040:	438a      	bics	r2, r1
 8001042:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fc12 	bl	800086c <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800104e:	f7ff fc0d 	bl	800086c <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e193      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001060:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001064:	2202      	movs	r2, #2
 8001066:	4013      	ands	r3, r2
 8001068:	d1f1      	bne.n	800104e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2204      	movs	r2, #4
 8001070:	4013      	ands	r3, r2
 8001072:	d100      	bne.n	8001076 <HAL_RCC_OscConfig+0x2fe>
 8001074:	e0c6      	b.n	8001204 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	231f      	movs	r3, #31
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2238      	movs	r2, #56	@ 0x38
 8001084:	4013      	ands	r3, r2
 8001086:	2b20      	cmp	r3, #32
 8001088:	d11e      	bne.n	80010c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_RCC_OscConfig+0x32c>)
 800108c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	d100      	bne.n	8001096 <HAL_RCC_OscConfig+0x31e>
 8001094:	e0b6      	b.n	8001204 <HAL_RCC_OscConfig+0x48c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d000      	beq.n	80010a0 <HAL_RCC_OscConfig+0x328>
 800109e:	e0b1      	b.n	8001204 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e171      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
 80010a4:	40021000 	.word	0x40021000
 80010a8:	fffeffff 	.word	0xfffeffff
 80010ac:	fffbffff 	.word	0xfffbffff
 80010b0:	ffff80ff 	.word	0xffff80ff
 80010b4:	ffffc7ff 	.word	0xffffc7ff
 80010b8:	00f42400 	.word	0x00f42400
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000004 	.word	0x20000004
 80010c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80010ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	055b      	lsls	r3, r3, #21
 80010d0:	4013      	ands	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_OscConfig+0x360>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_RCC_OscConfig+0x362>
 80010d8:	2300      	movs	r3, #0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d011      	beq.n	8001102 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4bac      	ldr	r3, [pc, #688]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80010e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010e2:	4bab      	ldr	r3, [pc, #684]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80010e4:	2180      	movs	r1, #128	@ 0x80
 80010e6:	0549      	lsls	r1, r1, #21
 80010e8:	430a      	orrs	r2, r1
 80010ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010ec:	4ba8      	ldr	r3, [pc, #672]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80010ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	055b      	lsls	r3, r3, #21
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80010fa:	231f      	movs	r3, #31
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001102:	4ba4      	ldr	r3, [pc, #656]	@ (8001394 <HAL_RCC_OscConfig+0x61c>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	@ 0x80
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4013      	ands	r3, r2
 800110c:	d11a      	bne.n	8001144 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800110e:	4ba1      	ldr	r3, [pc, #644]	@ (8001394 <HAL_RCC_OscConfig+0x61c>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4ba0      	ldr	r3, [pc, #640]	@ (8001394 <HAL_RCC_OscConfig+0x61c>)
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	0049      	lsls	r1, r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800111c:	f7ff fba6 	bl	800086c <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001126:	f7ff fba1 	bl	800086c <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e127      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001138:	4b96      	ldr	r3, [pc, #600]	@ (8001394 <HAL_RCC_OscConfig+0x61c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4013      	ands	r3, r2
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x3e2>
 800114c:	4b90      	ldr	r3, [pc, #576]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800114e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001150:	4b8f      	ldr	r3, [pc, #572]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001152:	2101      	movs	r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001158:	e01c      	b.n	8001194 <HAL_RCC_OscConfig+0x41c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b05      	cmp	r3, #5
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x404>
 8001162:	4b8b      	ldr	r3, [pc, #556]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001164:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001166:	4b8a      	ldr	r3, [pc, #552]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001168:	2104      	movs	r1, #4
 800116a:	430a      	orrs	r2, r1
 800116c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800116e:	4b88      	ldr	r3, [pc, #544]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001170:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001172:	4b87      	ldr	r3, [pc, #540]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001174:	2101      	movs	r1, #1
 8001176:	430a      	orrs	r2, r1
 8001178:	65da      	str	r2, [r3, #92]	@ 0x5c
 800117a:	e00b      	b.n	8001194 <HAL_RCC_OscConfig+0x41c>
 800117c:	4b84      	ldr	r3, [pc, #528]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800117e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001180:	4b83      	ldr	r3, [pc, #524]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001182:	2101      	movs	r1, #1
 8001184:	438a      	bics	r2, r1
 8001186:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001188:	4b81      	ldr	r3, [pc, #516]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800118a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800118c:	4b80      	ldr	r3, [pc, #512]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800118e:	2104      	movs	r1, #4
 8001190:	438a      	bics	r2, r1
 8001192:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d014      	beq.n	80011c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fb66 	bl	800086c <HAL_GetTick>
 80011a0:	0003      	movs	r3, r0
 80011a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a4:	e009      	b.n	80011ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a6:	f7ff fb61 	bl	800086c <HAL_GetTick>
 80011aa:	0002      	movs	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	4a79      	ldr	r2, [pc, #484]	@ (8001398 <HAL_RCC_OscConfig+0x620>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e0e6      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ba:	4b75      	ldr	r3, [pc, #468]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80011bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x42e>
 80011c4:	e013      	b.n	80011ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c6:	f7ff fb51 	bl	800086c <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ce:	e009      	b.n	80011e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d0:	f7ff fb4c 	bl	800086c <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	4a6f      	ldr	r2, [pc, #444]	@ (8001398 <HAL_RCC_OscConfig+0x620>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0d1      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80011e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80011ee:	231f      	movs	r3, #31
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d105      	bne.n	8001204 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80011f8:	4b65      	ldr	r3, [pc, #404]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80011fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011fc:	4b64      	ldr	r3, [pc, #400]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80011fe:	4967      	ldr	r1, [pc, #412]	@ (800139c <HAL_RCC_OscConfig+0x624>)
 8001200:	400a      	ands	r2, r1
 8001202:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d100      	bne.n	800120e <HAL_RCC_OscConfig+0x496>
 800120c:	e0bb      	b.n	8001386 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800120e:	4b60      	ldr	r3, [pc, #384]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2238      	movs	r2, #56	@ 0x38
 8001214:	4013      	ands	r3, r2
 8001216:	2b10      	cmp	r3, #16
 8001218:	d100      	bne.n	800121c <HAL_RCC_OscConfig+0x4a4>
 800121a:	e07b      	b.n	8001314 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d156      	bne.n	80012d2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001224:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b59      	ldr	r3, [pc, #356]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800122a:	495d      	ldr	r1, [pc, #372]	@ (80013a0 <HAL_RCC_OscConfig+0x628>)
 800122c:	400a      	ands	r2, r1
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fb1c 	bl	800086c <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123a:	f7ff fb17 	bl	800086c <HAL_GetTick>
 800123e:	0002      	movs	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e09d      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800124c:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	049b      	lsls	r3, r3, #18
 8001254:	4013      	ands	r3, r2
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001258:	4b4d      	ldr	r3, [pc, #308]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4a51      	ldr	r2, [pc, #324]	@ (80013a4 <HAL_RCC_OscConfig+0x62c>)
 800125e:	4013      	ands	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001284:	431a      	orrs	r2, r3
 8001286:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001288:	430a      	orrs	r2, r1
 800128a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800128c:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001292:	2180      	movs	r1, #128	@ 0x80
 8001294:	0449      	lsls	r1, r1, #17
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	0549      	lsls	r1, r1, #21
 80012a4:	430a      	orrs	r2, r1
 80012a6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fae0 	bl	800086c <HAL_GetTick>
 80012ac:	0003      	movs	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b2:	f7ff fadb 	bl	800086c <HAL_GetTick>
 80012b6:	0002      	movs	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e061      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012c4:	4b32      	ldr	r3, [pc, #200]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	049b      	lsls	r3, r3, #18
 80012cc:	4013      	ands	r3, r2
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x53a>
 80012d0:	e059      	b.n	8001386 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80012d8:	4931      	ldr	r1, [pc, #196]	@ (80013a0 <HAL_RCC_OscConfig+0x628>)
 80012da:	400a      	ands	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff fac5 	bl	800086c <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fac0 	bl	800086c <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e046      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	049b      	lsls	r3, r3, #18
 8001302:	4013      	ands	r3, r2
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001306:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 800130c:	4926      	ldr	r1, [pc, #152]	@ (80013a8 <HAL_RCC_OscConfig+0x630>)
 800130e:	400a      	ands	r2, r1
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	e038      	b.n	8001386 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e033      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_RCC_OscConfig+0x618>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2203      	movs	r2, #3
 800132a:	401a      	ands	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	429a      	cmp	r2, r3
 8001332:	d126      	bne.n	8001382 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2270      	movs	r2, #112	@ 0x70
 8001338:	401a      	ands	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	429a      	cmp	r2, r3
 8001340:	d11f      	bne.n	8001382 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	23fe      	movs	r3, #254	@ 0xfe
 8001346:	01db      	lsls	r3, r3, #7
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001350:	429a      	cmp	r2, r3
 8001352:	d116      	bne.n	8001382 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	23f8      	movs	r3, #248	@ 0xf8
 8001358:	039b      	lsls	r3, r3, #14
 800135a:	401a      	ands	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001360:	429a      	cmp	r2, r3
 8001362:	d10e      	bne.n	8001382 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	23e0      	movs	r3, #224	@ 0xe0
 8001368:	051b      	lsls	r3, r3, #20
 800136a:	401a      	ands	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001370:	429a      	cmp	r2, r3
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	0f5b      	lsrs	r3, r3, #29
 8001378:	075a      	lsls	r2, r3, #29
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800137e:	429a      	cmp	r2, r3
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b008      	add	sp, #32
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	40007000 	.word	0x40007000
 8001398:	00001388 	.word	0x00001388
 800139c:	efffffff 	.word	0xefffffff
 80013a0:	feffffff 	.word	0xfeffffff
 80013a4:	11c1808c 	.word	0x11c1808c
 80013a8:	eefefffc 	.word	0xeefefffc

080013ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0e9      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b76      	ldr	r3, [pc, #472]	@ (800159c <HAL_RCC_ClockConfig+0x1f0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2207      	movs	r2, #7
 80013c6:	4013      	ands	r3, r2
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d91e      	bls.n	800140c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b73      	ldr	r3, [pc, #460]	@ (800159c <HAL_RCC_ClockConfig+0x1f0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2207      	movs	r2, #7
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	4b70      	ldr	r3, [pc, #448]	@ (800159c <HAL_RCC_ClockConfig+0x1f0>)
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013e0:	f7ff fa44 	bl	800086c <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013e8:	e009      	b.n	80013fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ea:	f7ff fa3f 	bl	800086c <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	4a6a      	ldr	r2, [pc, #424]	@ (80015a0 <HAL_RCC_ClockConfig+0x1f4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e0ca      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013fe:	4b67      	ldr	r3, [pc, #412]	@ (800159c <HAL_RCC_ClockConfig+0x1f0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2207      	movs	r2, #7
 8001404:	4013      	ands	r3, r2
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2202      	movs	r2, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d015      	beq.n	8001442 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2204      	movs	r2, #4
 800141c:	4013      	ands	r3, r2
 800141e:	d006      	beq.n	800142e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001420:	4b60      	ldr	r3, [pc, #384]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	4b5f      	ldr	r3, [pc, #380]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001426:	21e0      	movs	r1, #224	@ 0xe0
 8001428:	01c9      	lsls	r1, r1, #7
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800142e:	4b5d      	ldr	r3, [pc, #372]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4a5d      	ldr	r2, [pc, #372]	@ (80015a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b59      	ldr	r3, [pc, #356]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 800143e:	430a      	orrs	r2, r1
 8001440:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2201      	movs	r2, #1
 8001448:	4013      	ands	r3, r2
 800144a:	d057      	beq.n	80014fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d107      	bne.n	8001464 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001454:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	4013      	ands	r3, r2
 800145e:	d12b      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e097      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d107      	bne.n	800147c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146c:	4b4d      	ldr	r3, [pc, #308]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	049b      	lsls	r3, r3, #18
 8001474:	4013      	ands	r3, r2
 8001476:	d11f      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e08b      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d107      	bne.n	8001494 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001484:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4013      	ands	r3, r2
 800148e:	d113      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e07f      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d106      	bne.n	80014aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149c:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 800149e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a0:	2202      	movs	r2, #2
 80014a2:	4013      	ands	r3, r2
 80014a4:	d108      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e074      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014aa:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 80014ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ae:	2202      	movs	r2, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e06d      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014b8:	4b3a      	ldr	r3, [pc, #232]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2207      	movs	r2, #7
 80014be:	4393      	bics	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014cc:	f7ff f9ce 	bl	800086c <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d4:	e009      	b.n	80014ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d6:	f7ff f9c9 	bl	800086c <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a2f      	ldr	r2, [pc, #188]	@ (80015a0 <HAL_RCC_ClockConfig+0x1f4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e054      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2238      	movs	r2, #56	@ 0x38
 80014f0:	401a      	ands	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1ec      	bne.n	80014d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014fc:	4b27      	ldr	r3, [pc, #156]	@ (800159c <HAL_RCC_ClockConfig+0x1f0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2207      	movs	r2, #7
 8001502:	4013      	ands	r3, r2
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d21e      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <HAL_RCC_ClockConfig+0x1f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2207      	movs	r2, #7
 8001510:	4393      	bics	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <HAL_RCC_ClockConfig+0x1f0>)
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800151c:	f7ff f9a6 	bl	800086c <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001524:	e009      	b.n	800153a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001526:	f7ff f9a1 	bl	800086c <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e02c      	b.n	8001594 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_RCC_ClockConfig+0x1f0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2207      	movs	r2, #7
 8001540:	4013      	ands	r3, r2
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d1ee      	bne.n	8001526 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2204      	movs	r2, #4
 800154e:	4013      	ands	r3, r2
 8001550:	d009      	beq.n	8001566 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001552:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	4a15      	ldr	r2, [pc, #84]	@ (80015ac <HAL_RCC_ClockConfig+0x200>)
 8001558:	4013      	ands	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001566:	f000 f829 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 800156a:	0001      	movs	r1, r0
 800156c:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_RCC_ClockConfig+0x1f8>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	220f      	movs	r2, #15
 8001574:	401a      	ands	r2, r3
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <HAL_RCC_ClockConfig+0x204>)
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	58d3      	ldr	r3, [r2, r3]
 800157c:	221f      	movs	r2, #31
 800157e:	4013      	ands	r3, r2
 8001580:	000a      	movs	r2, r1
 8001582:	40da      	lsrs	r2, r3
 8001584:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_RCC_ClockConfig+0x208>)
 8001586:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_RCC_ClockConfig+0x20c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff f911 	bl	80007b4 <HAL_InitTick>
 8001592:	0003      	movs	r3, r0
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40022000 	.word	0x40022000
 80015a0:	00001388 	.word	0x00001388
 80015a4:	40021000 	.word	0x40021000
 80015a8:	fffff0ff 	.word	0xfffff0ff
 80015ac:	ffff8fff 	.word	0xffff8fff
 80015b0:	08002bc8 	.word	0x08002bc8
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c2:	4b3c      	ldr	r3, [pc, #240]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2238      	movs	r2, #56	@ 0x38
 80015c8:	4013      	ands	r3, r2
 80015ca:	d10f      	bne.n	80015ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015cc:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0adb      	lsrs	r3, r3, #11
 80015d2:	2207      	movs	r2, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	2201      	movs	r2, #1
 80015d8:	409a      	lsls	r2, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4835      	ldr	r0, [pc, #212]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015e2:	f7fe fd8f 	bl	8000104 <__udivsi3>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	e05d      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ec:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2238      	movs	r2, #56	@ 0x38
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015f8:	4b30      	ldr	r3, [pc, #192]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x100>)
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	e054      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2238      	movs	r2, #56	@ 0x38
 8001604:	4013      	ands	r3, r2
 8001606:	2b10      	cmp	r3, #16
 8001608:	d138      	bne.n	800167c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800160a:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2203      	movs	r2, #3
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	2207      	movs	r2, #7
 800161c:	4013      	ands	r3, r2
 800161e:	3301      	adds	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d10d      	bne.n	8001644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	4824      	ldr	r0, [pc, #144]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x100>)
 800162c:	f7fe fd6a 	bl	8000104 <__udivsi3>
 8001630:	0003      	movs	r3, r0
 8001632:	0019      	movs	r1, r3
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	227f      	movs	r2, #127	@ 0x7f
 800163c:	4013      	ands	r3, r2
 800163e:	434b      	muls	r3, r1
 8001640:	617b      	str	r3, [r7, #20]
        break;
 8001642:	e00d      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	481c      	ldr	r0, [pc, #112]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001648:	f7fe fd5c 	bl	8000104 <__udivsi3>
 800164c:	0003      	movs	r3, r0
 800164e:	0019      	movs	r1, r3
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	227f      	movs	r2, #127	@ 0x7f
 8001658:	4013      	ands	r3, r2
 800165a:	434b      	muls	r3, r1
 800165c:	617b      	str	r3, [r7, #20]
        break;
 800165e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0f5b      	lsrs	r3, r3, #29
 8001666:	2207      	movs	r2, #7
 8001668:	4013      	ands	r3, r2
 800166a:	3301      	adds	r3, #1
 800166c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	6978      	ldr	r0, [r7, #20]
 8001672:	f7fe fd47 	bl	8000104 <__udivsi3>
 8001676:	0003      	movs	r3, r0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	e015      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800167c:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2238      	movs	r2, #56	@ 0x38
 8001682:	4013      	ands	r3, r2
 8001684:	2b20      	cmp	r3, #32
 8001686:	d103      	bne.n	8001690 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2238      	movs	r2, #56	@ 0x38
 8001696:	4013      	ands	r3, r2
 8001698:	2b18      	cmp	r3, #24
 800169a:	d103      	bne.n	80016a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800169c:	23fa      	movs	r3, #250	@ 0xfa
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	e001      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80016a8:	693b      	ldr	r3, [r7, #16]
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b006      	add	sp, #24
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	40021000 	.word	0x40021000
 80016b8:	00f42400 	.word	0x00f42400
 80016bc:	007a1200 	.word	0x007a1200

080016c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80016c8:	2313      	movs	r3, #19
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80016d0:	2312      	movs	r3, #18
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	4013      	ands	r3, r2
 80016e2:	d100      	bne.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80016e4:	e0a3      	b.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e6:	2011      	movs	r0, #17
 80016e8:	183b      	adds	r3, r7, r0
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ee:	4bc3      	ldr	r3, [pc, #780]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80016f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	055b      	lsls	r3, r3, #21
 80016f6:	4013      	ands	r3, r2
 80016f8:	d110      	bne.n	800171c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4bc0      	ldr	r3, [pc, #768]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80016fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016fe:	4bbf      	ldr	r3, [pc, #764]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001700:	2180      	movs	r1, #128	@ 0x80
 8001702:	0549      	lsls	r1, r1, #21
 8001704:	430a      	orrs	r2, r1
 8001706:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001708:	4bbc      	ldr	r3, [pc, #752]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800170a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	055b      	lsls	r3, r3, #21
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001716:	183b      	adds	r3, r7, r0
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171c:	4bb8      	ldr	r3, [pc, #736]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4bb7      	ldr	r3, [pc, #732]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	0049      	lsls	r1, r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800172a:	f7ff f89f 	bl	800086c <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001732:	e00b      	b.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001734:	f7ff f89a 	bl	800086c <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d904      	bls.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001742:	2313      	movs	r3, #19
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	2203      	movs	r2, #3
 8001748:	701a      	strb	r2, [r3, #0]
        break;
 800174a:	e005      	b.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800174c:	4bac      	ldr	r3, [pc, #688]	@ (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4013      	ands	r3, r2
 8001756:	d0ed      	beq.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001758:	2313      	movs	r3, #19
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d154      	bne.n	800180c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001762:	4ba6      	ldr	r3, [pc, #664]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001766:	23c0      	movs	r3, #192	@ 0xc0
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4013      	ands	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d019      	beq.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	429a      	cmp	r2, r3
 800177c:	d014      	beq.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800177e:	4b9f      	ldr	r3, [pc, #636]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001782:	4aa0      	ldr	r2, [pc, #640]	@ (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001784:	4013      	ands	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001788:	4b9c      	ldr	r3, [pc, #624]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800178a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800178c:	4b9b      	ldr	r3, [pc, #620]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800178e:	2180      	movs	r1, #128	@ 0x80
 8001790:	0249      	lsls	r1, r1, #9
 8001792:	430a      	orrs	r2, r1
 8001794:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001796:	4b99      	ldr	r3, [pc, #612]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001798:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800179a:	4b98      	ldr	r3, [pc, #608]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800179c:	499a      	ldr	r1, [pc, #616]	@ (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800179e:	400a      	ands	r2, r1
 80017a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80017a2:	4b96      	ldr	r3, [pc, #600]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	d016      	beq.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff f85c 	bl	800086c <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b8:	e00c      	b.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff f857 	bl	800086c <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a91      	ldr	r2, [pc, #580]	@ (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d904      	bls.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80017ca:	2313      	movs	r3, #19
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2203      	movs	r2, #3
 80017d0:	701a      	strb	r2, [r3, #0]
            break;
 80017d2:	e004      	b.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d4:	4b89      	ldr	r3, [pc, #548]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80017d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d0ed      	beq.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80017de:	2313      	movs	r3, #19
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10a      	bne.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017e8:	4b84      	ldr	r3, [pc, #528]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80017ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ec:	4a85      	ldr	r2, [pc, #532]	@ (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017f6:	4b81      	ldr	r3, [pc, #516]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017fc:	e00c      	b.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80017fe:	2312      	movs	r3, #18
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2213      	movs	r2, #19
 8001804:	18ba      	adds	r2, r7, r2
 8001806:	7812      	ldrb	r2, [r2, #0]
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e005      	b.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800180c:	2312      	movs	r3, #18
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	2213      	movs	r2, #19
 8001812:	18ba      	adds	r2, r7, r2
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001818:	2311      	movs	r3, #17
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d105      	bne.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001822:	4b76      	ldr	r3, [pc, #472]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001826:	4b75      	ldr	r3, [pc, #468]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001828:	4979      	ldr	r1, [pc, #484]	@ (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800182a:	400a      	ands	r2, r1
 800182c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	d009      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001838:	4b70      	ldr	r3, [pc, #448]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800183a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183c:	2203      	movs	r2, #3
 800183e:	4393      	bics	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4b6d      	ldr	r3, [pc, #436]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001848:	430a      	orrs	r2, r1
 800184a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2202      	movs	r2, #2
 8001852:	4013      	ands	r3, r2
 8001854:	d009      	beq.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001856:	4b69      	ldr	r3, [pc, #420]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185a:	220c      	movs	r2, #12
 800185c:	4393      	bics	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001866:	430a      	orrs	r2, r1
 8001868:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2210      	movs	r2, #16
 8001870:	4013      	ands	r3, r2
 8001872:	d009      	beq.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001874:	4b61      	ldr	r3, [pc, #388]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001878:	4a66      	ldr	r2, [pc, #408]	@ (8001a14 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800187a:	4013      	ands	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	4b5e      	ldr	r3, [pc, #376]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001884:	430a      	orrs	r2, r1
 8001886:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4013      	ands	r3, r2
 8001892:	d009      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001894:	4b59      	ldr	r3, [pc, #356]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001898:	4a5f      	ldr	r2, [pc, #380]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	4b56      	ldr	r3, [pc, #344]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	@ 0x80
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4013      	ands	r3, r2
 80018b2:	d009      	beq.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80018b4:	4b51      	ldr	r3, [pc, #324]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b8:	4a58      	ldr	r2, [pc, #352]	@ (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	4b4e      	ldr	r3, [pc, #312]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2220      	movs	r2, #32
 80018ce:	4013      	ands	r3, r2
 80018d0:	d009      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018d2:	4b4a      	ldr	r3, [pc, #296]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d6:	4a52      	ldr	r2, [pc, #328]	@ (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80018d8:	4013      	ands	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	4b46      	ldr	r3, [pc, #280]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	01db      	lsls	r3, r3, #7
 80018ee:	4013      	ands	r3, r2
 80018f0:	d015      	beq.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018f2:	4b42      	ldr	r3, [pc, #264]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80018f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	0899      	lsrs	r1, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	4b3f      	ldr	r3, [pc, #252]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001900:	430a      	orrs	r2, r1
 8001902:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1a      	ldr	r2, [r3, #32]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	05db      	lsls	r3, r3, #23
 800190c:	429a      	cmp	r2, r3
 800190e:	d106      	bne.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001910:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001916:	2180      	movs	r1, #128	@ 0x80
 8001918:	0249      	lsls	r1, r1, #9
 800191a:	430a      	orrs	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	031b      	lsls	r3, r3, #12
 8001926:	4013      	ands	r3, r2
 8001928:	d009      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800192a:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800192c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192e:	2240      	movs	r2, #64	@ 0x40
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001938:	4b30      	ldr	r3, [pc, #192]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800193a:	430a      	orrs	r2, r1
 800193c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	039b      	lsls	r3, r3, #14
 8001946:	4013      	ands	r3, r2
 8001948:	d016      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800194a:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800194c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194e:	4a35      	ldr	r2, [pc, #212]	@ (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001950:	4013      	ands	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001958:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800195a:	430a      	orrs	r2, r1
 800195c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	03db      	lsls	r3, r3, #15
 8001966:	429a      	cmp	r2, r3
 8001968:	d106      	bne.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800196a:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	0449      	lsls	r1, r1, #17
 8001974:	430a      	orrs	r2, r1
 8001976:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	03db      	lsls	r3, r3, #15
 8001980:	4013      	ands	r3, r2
 8001982:	d016      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001984:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001988:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800198a:	4013      	ands	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001992:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001994:	430a      	orrs	r2, r1
 8001996:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	045b      	lsls	r3, r3, #17
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d106      	bne.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80019a4:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019aa:	2180      	movs	r1, #128	@ 0x80
 80019ac:	0449      	lsls	r1, r1, #17
 80019ae:	430a      	orrs	r2, r1
 80019b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4013      	ands	r3, r2
 80019bc:	d016      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	01db      	lsls	r3, r3, #7
 80019da:	429a      	cmp	r2, r3
 80019dc:	d106      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	0249      	lsls	r1, r1, #9
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80019ec:	2312      	movs	r3, #18
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b006      	add	sp, #24
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	fffffcff 	.word	0xfffffcff
 8001a08:	fffeffff 	.word	0xfffeffff
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	efffffff 	.word	0xefffffff
 8001a14:	fffff3ff 	.word	0xfffff3ff
 8001a18:	fff3ffff 	.word	0xfff3ffff
 8001a1c:	ffcfffff 	.word	0xffcfffff
 8001a20:	ffffcfff 	.word	0xffffcfff
 8001a24:	ffbfffff 	.word	0xffbfffff
 8001a28:	feffffff 	.word	0xfeffffff
 8001a2c:	ffff3fff 	.word	0xffff3fff

08001a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e04a      	b.n	8001ad8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	223d      	movs	r2, #61	@ 0x3d
 8001a46:	5c9b      	ldrb	r3, [r3, r2]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d107      	bne.n	8001a5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	223c      	movs	r2, #60	@ 0x3c
 8001a52:	2100      	movs	r1, #0
 8001a54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7fe fdb9 	bl	80005d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	223d      	movs	r2, #61	@ 0x3d
 8001a62:	2102      	movs	r1, #2
 8001a64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	0019      	movs	r1, r3
 8001a70:	0010      	movs	r0, r2
 8001a72:	f000 fb55 	bl	8002120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2248      	movs	r2, #72	@ 0x48
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	223e      	movs	r2, #62	@ 0x3e
 8001a82:	2101      	movs	r1, #1
 8001a84:	5499      	strb	r1, [r3, r2]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	223f      	movs	r2, #63	@ 0x3f
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2240      	movs	r2, #64	@ 0x40
 8001a92:	2101      	movs	r1, #1
 8001a94:	5499      	strb	r1, [r3, r2]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2241      	movs	r2, #65	@ 0x41
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	5499      	strb	r1, [r3, r2]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2242      	movs	r2, #66	@ 0x42
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	5499      	strb	r1, [r3, r2]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2243      	movs	r2, #67	@ 0x43
 8001aaa:	2101      	movs	r1, #1
 8001aac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2244      	movs	r2, #68	@ 0x44
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	5499      	strb	r1, [r3, r2]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2245      	movs	r2, #69	@ 0x45
 8001aba:	2101      	movs	r1, #1
 8001abc:	5499      	strb	r1, [r3, r2]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2246      	movs	r2, #70	@ 0x46
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	5499      	strb	r1, [r3, r2]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2247      	movs	r2, #71	@ 0x47
 8001aca:	2101      	movs	r1, #1
 8001acc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	223d      	movs	r2, #61	@ 0x3d
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e04a      	b.n	8001b88 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	223d      	movs	r2, #61	@ 0x3d
 8001af6:	5c9b      	ldrb	r3, [r3, r2]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	223c      	movs	r2, #60	@ 0x3c
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 f841 	bl	8001b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	223d      	movs	r2, #61	@ 0x3d
 8001b12:	2102      	movs	r1, #2
 8001b14:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	0019      	movs	r1, r3
 8001b20:	0010      	movs	r0, r2
 8001b22:	f000 fafd 	bl	8002120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2248      	movs	r2, #72	@ 0x48
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	223e      	movs	r2, #62	@ 0x3e
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	223f      	movs	r2, #63	@ 0x3f
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2240      	movs	r2, #64	@ 0x40
 8001b42:	2101      	movs	r1, #1
 8001b44:	5499      	strb	r1, [r3, r2]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2241      	movs	r2, #65	@ 0x41
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2242      	movs	r2, #66	@ 0x42
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2243      	movs	r2, #67	@ 0x43
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2244      	movs	r2, #68	@ 0x44
 8001b62:	2101      	movs	r1, #1
 8001b64:	5499      	strb	r1, [r3, r2]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2245      	movs	r2, #69	@ 0x45
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	5499      	strb	r1, [r3, r2]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2246      	movs	r2, #70	@ 0x46
 8001b72:	2101      	movs	r1, #1
 8001b74:	5499      	strb	r1, [r3, r2]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2247      	movs	r2, #71	@ 0x47
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	223d      	movs	r2, #61	@ 0x3d
 8001b82:	2101      	movs	r1, #1
 8001b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d108      	bne.n	8001bc2 <HAL_TIM_PWM_Start+0x22>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	223e      	movs	r2, #62	@ 0x3e
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	1e5a      	subs	r2, r3, #1
 8001bbc:	4193      	sbcs	r3, r2
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	e037      	b.n	8001c32 <HAL_TIM_PWM_Start+0x92>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d108      	bne.n	8001bda <HAL_TIM_PWM_Start+0x3a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	223f      	movs	r2, #63	@ 0x3f
 8001bcc:	5c9b      	ldrb	r3, [r3, r2]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	1e5a      	subs	r2, r3, #1
 8001bd4:	4193      	sbcs	r3, r2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	e02b      	b.n	8001c32 <HAL_TIM_PWM_Start+0x92>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d108      	bne.n	8001bf2 <HAL_TIM_PWM_Start+0x52>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	5c9b      	ldrb	r3, [r3, r2]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	1e5a      	subs	r2, r3, #1
 8001bec:	4193      	sbcs	r3, r2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	e01f      	b.n	8001c32 <HAL_TIM_PWM_Start+0x92>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d108      	bne.n	8001c0a <HAL_TIM_PWM_Start+0x6a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2241      	movs	r2, #65	@ 0x41
 8001bfc:	5c9b      	ldrb	r3, [r3, r2]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	4193      	sbcs	r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	e013      	b.n	8001c32 <HAL_TIM_PWM_Start+0x92>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d108      	bne.n	8001c22 <HAL_TIM_PWM_Start+0x82>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2242      	movs	r2, #66	@ 0x42
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	4193      	sbcs	r3, r2
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	e007      	b.n	8001c32 <HAL_TIM_PWM_Start+0x92>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2243      	movs	r2, #67	@ 0x43
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	4193      	sbcs	r3, r2
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e08b      	b.n	8001d52 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <HAL_TIM_PWM_Start+0xaa>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	223e      	movs	r2, #62	@ 0x3e
 8001c44:	2102      	movs	r1, #2
 8001c46:	5499      	strb	r1, [r3, r2]
 8001c48:	e023      	b.n	8001c92 <HAL_TIM_PWM_Start+0xf2>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d104      	bne.n	8001c5a <HAL_TIM_PWM_Start+0xba>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	223f      	movs	r2, #63	@ 0x3f
 8001c54:	2102      	movs	r1, #2
 8001c56:	5499      	strb	r1, [r3, r2]
 8001c58:	e01b      	b.n	8001c92 <HAL_TIM_PWM_Start+0xf2>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d104      	bne.n	8001c6a <HAL_TIM_PWM_Start+0xca>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	@ 0x40
 8001c64:	2102      	movs	r1, #2
 8001c66:	5499      	strb	r1, [r3, r2]
 8001c68:	e013      	b.n	8001c92 <HAL_TIM_PWM_Start+0xf2>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d104      	bne.n	8001c7a <HAL_TIM_PWM_Start+0xda>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2241      	movs	r2, #65	@ 0x41
 8001c74:	2102      	movs	r1, #2
 8001c76:	5499      	strb	r1, [r3, r2]
 8001c78:	e00b      	b.n	8001c92 <HAL_TIM_PWM_Start+0xf2>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d104      	bne.n	8001c8a <HAL_TIM_PWM_Start+0xea>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2242      	movs	r2, #66	@ 0x42
 8001c84:	2102      	movs	r1, #2
 8001c86:	5499      	strb	r1, [r3, r2]
 8001c88:	e003      	b.n	8001c92 <HAL_TIM_PWM_Start+0xf2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2243      	movs	r2, #67	@ 0x43
 8001c8e:	2102      	movs	r1, #2
 8001c90:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 fe2e 	bl	80028fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8001d5c <HAL_TIM_PWM_Start+0x1bc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_TIM_PWM_Start+0x128>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2c      	ldr	r2, [pc, #176]	@ (8001d60 <HAL_TIM_PWM_Start+0x1c0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_TIM_PWM_Start+0x128>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d64 <HAL_TIM_PWM_Start+0x1c4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_TIM_PWM_Start+0x128>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a29      	ldr	r2, [pc, #164]	@ (8001d68 <HAL_TIM_PWM_Start+0x1c8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_TIM_PWM_Start+0x12c>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_TIM_PWM_Start+0x12e>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2180      	movs	r1, #128	@ 0x80
 8001cde:	0209      	lsls	r1, r1, #8
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d5c <HAL_TIM_PWM_Start+0x1bc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00f      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x16e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d009      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x16e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <HAL_TIM_PWM_Start+0x1cc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d004      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x16e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <HAL_TIM_PWM_Start+0x1c0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d116      	bne.n	8001d3c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a16      	ldr	r2, [pc, #88]	@ (8001d70 <HAL_TIM_PWM_Start+0x1d0>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b06      	cmp	r3, #6
 8001d1e:	d016      	beq.n	8001d4e <HAL_TIM_PWM_Start+0x1ae>
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	2380      	movs	r3, #128	@ 0x80
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d011      	beq.n	8001d4e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3a:	e008      	b.n	8001d4e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2101      	movs	r1, #1
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	e000      	b.n	8001d50 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	40014800 	.word	0x40014800
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	00010007 	.word	0x00010007

08001d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	2317      	movs	r3, #23
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	223c      	movs	r2, #60	@ 0x3c
 8001d8c:	5c9b      	ldrb	r3, [r3, r2]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e0e5      	b.n	8001f62 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	223c      	movs	r2, #60	@ 0x3c
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b14      	cmp	r3, #20
 8001da2:	d900      	bls.n	8001da6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001da4:	e0d1      	b.n	8001f4a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	009a      	lsls	r2, r3, #2
 8001daa:	4b70      	ldr	r3, [pc, #448]	@ (8001f6c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001dac:	18d3      	adds	r3, r2, r3
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	0011      	movs	r1, r2
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fa3e 	bl	800223c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2108      	movs	r1, #8
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2104      	movs	r1, #4
 8001ddc:	438a      	bics	r2, r1
 8001dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6999      	ldr	r1, [r3, #24]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	619a      	str	r2, [r3, #24]
      break;
 8001df2:	e0af      	b.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 faa7 	bl	8002350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699a      	ldr	r2, [r3, #24]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2180      	movs	r1, #128	@ 0x80
 8001e0e:	0109      	lsls	r1, r1, #4
 8001e10:	430a      	orrs	r2, r1
 8001e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4954      	ldr	r1, [pc, #336]	@ (8001f70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6999      	ldr	r1, [r3, #24]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	021a      	lsls	r2, r3, #8
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	619a      	str	r2, [r3, #24]
      break;
 8001e38:	e08c      	b.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	0011      	movs	r1, r2
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 fb08 	bl	8002458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2108      	movs	r1, #8
 8001e54:	430a      	orrs	r2, r1
 8001e56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2104      	movs	r1, #4
 8001e64:	438a      	bics	r2, r1
 8001e66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69d9      	ldr	r1, [r3, #28]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	61da      	str	r2, [r3, #28]
      break;
 8001e7a:	e06b      	b.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	0011      	movs	r1, r2
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 fb6f 	bl	8002568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	0109      	lsls	r1, r1, #4
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4932      	ldr	r1, [pc, #200]	@ (8001f70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69d9      	ldr	r1, [r3, #28]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	021a      	lsls	r2, r3, #8
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	61da      	str	r2, [r3, #28]
      break;
 8001ec0:	e048      	b.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	0011      	movs	r1, r2
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 fbb6 	bl	800263c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2108      	movs	r1, #8
 8001edc:	430a      	orrs	r2, r1
 8001ede:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2104      	movs	r1, #4
 8001eec:	438a      	bics	r2, r1
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001f02:	e027      	b.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 fbf5 	bl	80026fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	0109      	lsls	r1, r1, #4
 8001f20:	430a      	orrs	r2, r1
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4910      	ldr	r1, [pc, #64]	@ (8001f70 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	021a      	lsls	r2, r3, #8
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001f48:	e004      	b.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001f4a:	2317      	movs	r3, #23
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
      break;
 8001f52:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	223c      	movs	r2, #60	@ 0x3c
 8001f58:	2100      	movs	r1, #0
 8001f5a:	5499      	strb	r1, [r3, r2]

  return status;
 8001f5c:	2317      	movs	r3, #23
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781b      	ldrb	r3, [r3, #0]
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b006      	add	sp, #24
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	08002c08 	.word	0x08002c08
 8001f70:	fffffbff 	.word	0xfffffbff

08001f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	230f      	movs	r3, #15
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	223c      	movs	r2, #60	@ 0x3c
 8001f8a:	5c9b      	ldrb	r3, [r3, r2]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_TIM_ConfigClockSource+0x20>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e0bc      	b.n	800210e <HAL_TIM_ConfigClockSource+0x19a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	223c      	movs	r2, #60	@ 0x3c
 8001f98:	2101      	movs	r1, #1
 8001f9a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	223d      	movs	r2, #61	@ 0x3d
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4a5a      	ldr	r2, [pc, #360]	@ (8002118 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4a59      	ldr	r2, [pc, #356]	@ (800211c <HAL_TIM_ConfigClockSource+0x1a8>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2280      	movs	r2, #128	@ 0x80
 8001fca:	0192      	lsls	r2, r2, #6
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d040      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0xde>
 8001fd0:	2280      	movs	r2, #128	@ 0x80
 8001fd2:	0192      	lsls	r2, r2, #6
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d900      	bls.n	8001fda <HAL_TIM_ConfigClockSource+0x66>
 8001fd8:	e088      	b.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	0152      	lsls	r2, r2, #5
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d100      	bne.n	8001fe4 <HAL_TIM_ConfigClockSource+0x70>
 8001fe2:	e088      	b.n	80020f6 <HAL_TIM_ConfigClockSource+0x182>
 8001fe4:	2280      	movs	r2, #128	@ 0x80
 8001fe6:	0152      	lsls	r2, r2, #5
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d900      	bls.n	8001fee <HAL_TIM_ConfigClockSource+0x7a>
 8001fec:	e07e      	b.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
 8001fee:	2b70      	cmp	r3, #112	@ 0x70
 8001ff0:	d018      	beq.n	8002024 <HAL_TIM_ConfigClockSource+0xb0>
 8001ff2:	d900      	bls.n	8001ff6 <HAL_TIM_ConfigClockSource+0x82>
 8001ff4:	e07a      	b.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
 8001ff6:	2b60      	cmp	r3, #96	@ 0x60
 8001ff8:	d04f      	beq.n	800209a <HAL_TIM_ConfigClockSource+0x126>
 8001ffa:	d900      	bls.n	8001ffe <HAL_TIM_ConfigClockSource+0x8a>
 8001ffc:	e076      	b.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
 8001ffe:	2b50      	cmp	r3, #80	@ 0x50
 8002000:	d03b      	beq.n	800207a <HAL_TIM_ConfigClockSource+0x106>
 8002002:	d900      	bls.n	8002006 <HAL_TIM_ConfigClockSource+0x92>
 8002004:	e072      	b.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
 8002006:	2b40      	cmp	r3, #64	@ 0x40
 8002008:	d057      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0x146>
 800200a:	d900      	bls.n	800200e <HAL_TIM_ConfigClockSource+0x9a>
 800200c:	e06e      	b.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
 800200e:	2b30      	cmp	r3, #48	@ 0x30
 8002010:	d063      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x166>
 8002012:	d86b      	bhi.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
 8002014:	2b20      	cmp	r3, #32
 8002016:	d060      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x166>
 8002018:	d868      	bhi.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
 800201a:	2b00      	cmp	r3, #0
 800201c:	d05d      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x166>
 800201e:	2b10      	cmp	r3, #16
 8002020:	d05b      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x166>
 8002022:	e063      	b.n	80020ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002034:	f000 fc42 	bl	80028bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2277      	movs	r2, #119	@ 0x77
 8002044:	4313      	orrs	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	609a      	str	r2, [r3, #8]
      break;
 8002050:	e052      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002062:	f000 fc2b 	bl	80028bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	01c9      	lsls	r1, r1, #7
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
      break;
 8002078:	e03e      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002086:	001a      	movs	r2, r3
 8002088:	f000 fb9c 	bl	80027c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2150      	movs	r1, #80	@ 0x50
 8002092:	0018      	movs	r0, r3
 8002094:	f000 fbf6 	bl	8002884 <TIM_ITRx_SetConfig>
      break;
 8002098:	e02e      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020a6:	001a      	movs	r2, r3
 80020a8:	f000 fbba 	bl	8002820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2160      	movs	r1, #96	@ 0x60
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fbe6 	bl	8002884 <TIM_ITRx_SetConfig>
      break;
 80020b8:	e01e      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c6:	001a      	movs	r2, r3
 80020c8:	f000 fb7c 	bl	80027c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2140      	movs	r1, #64	@ 0x40
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 fbd6 	bl	8002884 <TIM_ITRx_SetConfig>
      break;
 80020d8:	e00e      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0019      	movs	r1, r3
 80020e4:	0010      	movs	r0, r2
 80020e6:	f000 fbcd 	bl	8002884 <TIM_ITRx_SetConfig>
      break;
 80020ea:	e005      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80020ec:	230f      	movs	r3, #15
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
      break;
 80020f4:	e000      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80020f6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	223d      	movs	r2, #61	@ 0x3d
 80020fc:	2101      	movs	r1, #1
 80020fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	223c      	movs	r2, #60	@ 0x3c
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

  return status;
 8002108:	230f      	movs	r3, #15
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	ffceff88 	.word	0xffceff88
 800211c:	ffff00ff 	.word	0xffff00ff

08002120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3b      	ldr	r2, [pc, #236]	@ (8002220 <TIM_Base_SetConfig+0x100>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d008      	beq.n	800214a <TIM_Base_SetConfig+0x2a>
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	05db      	lsls	r3, r3, #23
 800213e:	429a      	cmp	r2, r3
 8002140:	d003      	beq.n	800214a <TIM_Base_SetConfig+0x2a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a37      	ldr	r2, [pc, #220]	@ (8002224 <TIM_Base_SetConfig+0x104>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d108      	bne.n	800215c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2270      	movs	r2, #112	@ 0x70
 800214e:	4393      	bics	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <TIM_Base_SetConfig+0x100>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d018      	beq.n	8002196 <TIM_Base_SetConfig+0x76>
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	05db      	lsls	r3, r3, #23
 800216a:	429a      	cmp	r2, r3
 800216c:	d013      	beq.n	8002196 <TIM_Base_SetConfig+0x76>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2c      	ldr	r2, [pc, #176]	@ (8002224 <TIM_Base_SetConfig+0x104>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00f      	beq.n	8002196 <TIM_Base_SetConfig+0x76>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2b      	ldr	r2, [pc, #172]	@ (8002228 <TIM_Base_SetConfig+0x108>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00b      	beq.n	8002196 <TIM_Base_SetConfig+0x76>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <TIM_Base_SetConfig+0x10c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <TIM_Base_SetConfig+0x76>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a29      	ldr	r2, [pc, #164]	@ (8002230 <TIM_Base_SetConfig+0x110>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d003      	beq.n	8002196 <TIM_Base_SetConfig+0x76>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a28      	ldr	r2, [pc, #160]	@ (8002234 <TIM_Base_SetConfig+0x114>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d108      	bne.n	80021a8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a27      	ldr	r2, [pc, #156]	@ (8002238 <TIM_Base_SetConfig+0x118>)
 800219a:	4013      	ands	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2280      	movs	r2, #128	@ 0x80
 80021ac:	4393      	bics	r3, r2
 80021ae:	001a      	movs	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a13      	ldr	r2, [pc, #76]	@ (8002220 <TIM_Base_SetConfig+0x100>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00b      	beq.n	80021ee <TIM_Base_SetConfig+0xce>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a14      	ldr	r2, [pc, #80]	@ (800222c <TIM_Base_SetConfig+0x10c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <TIM_Base_SetConfig+0xce>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a13      	ldr	r2, [pc, #76]	@ (8002230 <TIM_Base_SetConfig+0x110>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d003      	beq.n	80021ee <TIM_Base_SetConfig+0xce>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <TIM_Base_SetConfig+0x114>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d103      	bne.n	80021f6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2201      	movs	r2, #1
 800220e:	4393      	bics	r3, r2
 8002210:	001a      	movs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]
  }
}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40000400 	.word	0x40000400
 8002228:	40002000 	.word	0x40002000
 800222c:	40014000 	.word	0x40014000
 8002230:	40014400 	.word	0x40014400
 8002234:	40014800 	.word	0x40014800
 8002238:	fffffcff 	.word	0xfffffcff

0800223c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	2201      	movs	r2, #1
 8002252:	4393      	bics	r3, r2
 8002254:	001a      	movs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a32      	ldr	r2, [pc, #200]	@ (8002334 <TIM_OC1_SetConfig+0xf8>)
 800226a:	4013      	ands	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2203      	movs	r2, #3
 8002272:	4393      	bics	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2202      	movs	r2, #2
 8002284:	4393      	bics	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a28      	ldr	r2, [pc, #160]	@ (8002338 <TIM_OC1_SetConfig+0xfc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00b      	beq.n	80022b2 <TIM_OC1_SetConfig+0x76>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a27      	ldr	r2, [pc, #156]	@ (800233c <TIM_OC1_SetConfig+0x100>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <TIM_OC1_SetConfig+0x76>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a26      	ldr	r2, [pc, #152]	@ (8002340 <TIM_OC1_SetConfig+0x104>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d003      	beq.n	80022b2 <TIM_OC1_SetConfig+0x76>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a25      	ldr	r2, [pc, #148]	@ (8002344 <TIM_OC1_SetConfig+0x108>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10c      	bne.n	80022cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2208      	movs	r2, #8
 80022b6:	4393      	bics	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2204      	movs	r2, #4
 80022c8:	4393      	bics	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002338 <TIM_OC1_SetConfig+0xfc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00b      	beq.n	80022ec <TIM_OC1_SetConfig+0xb0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a19      	ldr	r2, [pc, #100]	@ (800233c <TIM_OC1_SetConfig+0x100>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <TIM_OC1_SetConfig+0xb0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a18      	ldr	r2, [pc, #96]	@ (8002340 <TIM_OC1_SetConfig+0x104>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d003      	beq.n	80022ec <TIM_OC1_SetConfig+0xb0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a17      	ldr	r2, [pc, #92]	@ (8002344 <TIM_OC1_SetConfig+0x108>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d111      	bne.n	8002310 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <TIM_OC1_SetConfig+0x10c>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4a15      	ldr	r2, [pc, #84]	@ (800234c <TIM_OC1_SetConfig+0x110>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	621a      	str	r2, [r3, #32]
}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b006      	add	sp, #24
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	fffeff8f 	.word	0xfffeff8f
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800
 8002348:	fffffeff 	.word	0xfffffeff
 800234c:	fffffdff 	.word	0xfffffdff

08002350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	2210      	movs	r2, #16
 8002366:	4393      	bics	r3, r2
 8002368:	001a      	movs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a2e      	ldr	r2, [pc, #184]	@ (8002438 <TIM_OC2_SetConfig+0xe8>)
 800237e:	4013      	ands	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a2d      	ldr	r2, [pc, #180]	@ (800243c <TIM_OC2_SetConfig+0xec>)
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2220      	movs	r2, #32
 800239a:	4393      	bics	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a24      	ldr	r2, [pc, #144]	@ (8002440 <TIM_OC2_SetConfig+0xf0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10d      	bne.n	80023ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2280      	movs	r2, #128	@ 0x80
 80023b6:	4393      	bics	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2240      	movs	r2, #64	@ 0x40
 80023ca:	4393      	bics	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002440 <TIM_OC2_SetConfig+0xf0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00b      	beq.n	80023ee <TIM_OC2_SetConfig+0x9e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002444 <TIM_OC2_SetConfig+0xf4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <TIM_OC2_SetConfig+0x9e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <TIM_OC2_SetConfig+0xf8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_OC2_SetConfig+0x9e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a18      	ldr	r2, [pc, #96]	@ (800244c <TIM_OC2_SetConfig+0xfc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d113      	bne.n	8002416 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4a17      	ldr	r2, [pc, #92]	@ (8002450 <TIM_OC2_SetConfig+0x100>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <TIM_OC2_SetConfig+0x104>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	621a      	str	r2, [r3, #32]
}
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b006      	add	sp, #24
 8002436:	bd80      	pop	{r7, pc}
 8002438:	feff8fff 	.word	0xfeff8fff
 800243c:	fffffcff 	.word	0xfffffcff
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40014000 	.word	0x40014000
 8002448:	40014400 	.word	0x40014400
 800244c:	40014800 	.word	0x40014800
 8002450:	fffffbff 	.word	0xfffffbff
 8002454:	fffff7ff 	.word	0xfffff7ff

08002458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a33      	ldr	r2, [pc, #204]	@ (800253c <TIM_OC3_SetConfig+0xe4>)
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a2f      	ldr	r2, [pc, #188]	@ (8002540 <TIM_OC3_SetConfig+0xe8>)
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2203      	movs	r2, #3
 800248c:	4393      	bics	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	4a29      	ldr	r2, [pc, #164]	@ (8002544 <TIM_OC3_SetConfig+0xec>)
 800249e:	4013      	ands	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a25      	ldr	r2, [pc, #148]	@ (8002548 <TIM_OC3_SetConfig+0xf0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10d      	bne.n	80024d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4a24      	ldr	r2, [pc, #144]	@ (800254c <TIM_OC3_SetConfig+0xf4>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <TIM_OC3_SetConfig+0xf8>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002548 <TIM_OC3_SetConfig+0xf0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_OC3_SetConfig+0x9a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <TIM_OC3_SetConfig+0xfc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <TIM_OC3_SetConfig+0x9a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002558 <TIM_OC3_SetConfig+0x100>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_OC3_SetConfig+0x9a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <TIM_OC3_SetConfig+0x104>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d113      	bne.n	800251a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002560 <TIM_OC3_SetConfig+0x108>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <TIM_OC3_SetConfig+0x10c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	621a      	str	r2, [r3, #32]
}
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b006      	add	sp, #24
 800253a:	bd80      	pop	{r7, pc}
 800253c:	fffffeff 	.word	0xfffffeff
 8002540:	fffeff8f 	.word	0xfffeff8f
 8002544:	fffffdff 	.word	0xfffffdff
 8002548:	40012c00 	.word	0x40012c00
 800254c:	fffff7ff 	.word	0xfffff7ff
 8002550:	fffffbff 	.word	0xfffffbff
 8002554:	40014000 	.word	0x40014000
 8002558:	40014400 	.word	0x40014400
 800255c:	40014800 	.word	0x40014800
 8002560:	ffffefff 	.word	0xffffefff
 8002564:	ffffdfff 	.word	0xffffdfff

08002568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a26      	ldr	r2, [pc, #152]	@ (8002618 <TIM_OC4_SetConfig+0xb0>)
 800257e:	401a      	ands	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a22      	ldr	r2, [pc, #136]	@ (800261c <TIM_OC4_SetConfig+0xb4>)
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a21      	ldr	r2, [pc, #132]	@ (8002620 <TIM_OC4_SetConfig+0xb8>)
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002624 <TIM_OC4_SetConfig+0xbc>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	031b      	lsls	r3, r3, #12
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a19      	ldr	r2, [pc, #100]	@ (8002628 <TIM_OC4_SetConfig+0xc0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00b      	beq.n	80025e0 <TIM_OC4_SetConfig+0x78>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a18      	ldr	r2, [pc, #96]	@ (800262c <TIM_OC4_SetConfig+0xc4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d007      	beq.n	80025e0 <TIM_OC4_SetConfig+0x78>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a17      	ldr	r2, [pc, #92]	@ (8002630 <TIM_OC4_SetConfig+0xc8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d003      	beq.n	80025e0 <TIM_OC4_SetConfig+0x78>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a16      	ldr	r2, [pc, #88]	@ (8002634 <TIM_OC4_SetConfig+0xcc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d109      	bne.n	80025f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <TIM_OC4_SetConfig+0xd0>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	621a      	str	r2, [r3, #32]
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b006      	add	sp, #24
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	ffffefff 	.word	0xffffefff
 800261c:	feff8fff 	.word	0xfeff8fff
 8002620:	fffffcff 	.word	0xfffffcff
 8002624:	ffffdfff 	.word	0xffffdfff
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40014000 	.word	0x40014000
 8002630:	40014400 	.word	0x40014400
 8002634:	40014800 	.word	0x40014800
 8002638:	ffffbfff 	.word	0xffffbfff

0800263c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a23      	ldr	r2, [pc, #140]	@ (80026e0 <TIM_OC5_SetConfig+0xa4>)
 8002652:	401a      	ands	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <TIM_OC5_SetConfig+0xa8>)
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4a1b      	ldr	r2, [pc, #108]	@ (80026e8 <TIM_OC5_SetConfig+0xac>)
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <TIM_OC5_SetConfig+0xb0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00b      	beq.n	80026aa <TIM_OC5_SetConfig+0x6e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a16      	ldr	r2, [pc, #88]	@ (80026f0 <TIM_OC5_SetConfig+0xb4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <TIM_OC5_SetConfig+0x6e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <TIM_OC5_SetConfig+0xb8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d003      	beq.n	80026aa <TIM_OC5_SetConfig+0x6e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <TIM_OC5_SetConfig+0xbc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d109      	bne.n	80026be <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <TIM_OC5_SetConfig+0xa4>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	621a      	str	r2, [r3, #32]
}
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b006      	add	sp, #24
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	fffeffff 	.word	0xfffeffff
 80026e4:	fffeff8f 	.word	0xfffeff8f
 80026e8:	fffdffff 	.word	0xfffdffff
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800

080026fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a24      	ldr	r2, [pc, #144]	@ (80027a4 <TIM_OC6_SetConfig+0xa8>)
 8002712:	401a      	ands	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a20      	ldr	r2, [pc, #128]	@ (80027a8 <TIM_OC6_SetConfig+0xac>)
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ac <TIM_OC6_SetConfig+0xb0>)
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a18      	ldr	r2, [pc, #96]	@ (80027b0 <TIM_OC6_SetConfig+0xb4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00b      	beq.n	800276c <TIM_OC6_SetConfig+0x70>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <TIM_OC6_SetConfig+0xb8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <TIM_OC6_SetConfig+0x70>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <TIM_OC6_SetConfig+0xbc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d003      	beq.n	800276c <TIM_OC6_SetConfig+0x70>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a15      	ldr	r2, [pc, #84]	@ (80027bc <TIM_OC6_SetConfig+0xc0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d109      	bne.n	8002780 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <TIM_OC6_SetConfig+0xc4>)
 8002770:	4013      	ands	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	b006      	add	sp, #24
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	ffefffff 	.word	0xffefffff
 80027a8:	feff8fff 	.word	0xfeff8fff
 80027ac:	ffdfffff 	.word	0xffdfffff
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40014000 	.word	0x40014000
 80027b8:	40014400 	.word	0x40014400
 80027bc:	40014800 	.word	0x40014800
 80027c0:	fffbffff 	.word	0xfffbffff

080027c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2201      	movs	r2, #1
 80027dc:	4393      	bics	r3, r2
 80027de:	001a      	movs	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	22f0      	movs	r2, #240	@ 0xf0
 80027ee:	4393      	bics	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	220a      	movs	r2, #10
 8002800:	4393      	bics	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	621a      	str	r2, [r3, #32]
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b006      	add	sp, #24
 800281e:	bd80      	pop	{r7, pc}

08002820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	2210      	movs	r2, #16
 8002838:	4393      	bics	r3, r2
 800283a:	001a      	movs	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4a0d      	ldr	r2, [pc, #52]	@ (8002880 <TIM_TI2_ConfigInputStage+0x60>)
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	031b      	lsls	r3, r3, #12
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	22a0      	movs	r2, #160	@ 0xa0
 800285c:	4393      	bics	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	621a      	str	r2, [r3, #32]
}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b006      	add	sp, #24
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	ffff0fff 	.word	0xffff0fff

08002884 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <TIM_ITRx_SetConfig+0x34>)
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	2207      	movs	r2, #7
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	609a      	str	r2, [r3, #8]
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	ffcfff8f 	.word	0xffcfff8f

080028bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	4a09      	ldr	r2, [pc, #36]	@ (80028f8 <TIM_ETR_SetConfig+0x3c>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	021a      	lsls	r2, r3, #8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	431a      	orrs	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b006      	add	sp, #24
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	ffff00ff 	.word	0xffff00ff

080028fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	221f      	movs	r2, #31
 800290c:	4013      	ands	r3, r2
 800290e:	2201      	movs	r2, #1
 8002910:	409a      	lsls	r2, r3
 8002912:	0013      	movs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	43d2      	mvns	r2, r2
 800291e:	401a      	ands	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	211f      	movs	r1, #31
 800292c:	400b      	ands	r3, r1
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4099      	lsls	r1, r3
 8002932:	000b      	movs	r3, r1
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	46bd      	mov	sp, r7
 800293e:	b006      	add	sp, #24
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	223c      	movs	r2, #60	@ 0x3c
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002958:	2302      	movs	r3, #2
 800295a:	e055      	b.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	223c      	movs	r2, #60	@ 0x3c
 8002960:	2101      	movs	r1, #1
 8002962:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	223d      	movs	r2, #61	@ 0x3d
 8002968:	2102      	movs	r1, #2
 800296a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a23      	ldr	r2, [pc, #140]	@ (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d108      	bne.n	8002998 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2270      	movs	r2, #112	@ 0x70
 800299c:	4393      	bics	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a16      	ldr	r2, [pc, #88]	@ (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00f      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	05db      	lsls	r3, r3, #23
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d009      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a11      	ldr	r2, [pc, #68]	@ (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d10c      	bne.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2280      	movs	r2, #128	@ 0x80
 80029e0:	4393      	bics	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	223d      	movs	r2, #61	@ 0x3d
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223c      	movs	r2, #60	@ 0x3c
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	ff0fffff 	.word	0xff0fffff
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40014000 	.word	0x40014000

08002a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223c      	movs	r2, #60	@ 0x3c
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e06f      	b.n	8002b1c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	223c      	movs	r2, #60	@ 0x3c
 8002a40:	2101      	movs	r1, #1
 8002a42:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	22ff      	movs	r2, #255	@ 0xff
 8002a48:	4393      	bics	r3, r2
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a33      	ldr	r2, [pc, #204]	@ (8002b24 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002a58:	401a      	ands	r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a30      	ldr	r2, [pc, #192]	@ (8002b28 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002a66:	401a      	ands	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a2e      	ldr	r2, [pc, #184]	@ (8002b2c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002a74:	401a      	ands	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a2b      	ldr	r2, [pc, #172]	@ (8002b30 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002a82:	401a      	ands	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a29      	ldr	r2, [pc, #164]	@ (8002b34 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002a90:	401a      	ands	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a26      	ldr	r2, [pc, #152]	@ (8002b38 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a24      	ldr	r2, [pc, #144]	@ (8002b3c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002aac:	401a      	ands	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a21      	ldr	r2, [pc, #132]	@ (8002b40 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002abc:	401a      	ands	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d11c      	bne.n	8002b0a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b48 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	051b      	lsls	r3, r3, #20
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b4c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002af2:	401a      	ands	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a15      	ldr	r2, [pc, #84]	@ (8002b54 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002b00:	401a      	ands	r2, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223c      	movs	r2, #60	@ 0x3c
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b004      	add	sp, #16
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	fffffcff 	.word	0xfffffcff
 8002b28:	fffffbff 	.word	0xfffffbff
 8002b2c:	fffff7ff 	.word	0xfffff7ff
 8002b30:	ffffefff 	.word	0xffffefff
 8002b34:	ffffdfff 	.word	0xffffdfff
 8002b38:	ffffbfff 	.word	0xffffbfff
 8002b3c:	fff0ffff 	.word	0xfff0ffff
 8002b40:	efffffff 	.word	0xefffffff
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	ff0fffff 	.word	0xff0fffff
 8002b4c:	feffffff 	.word	0xfeffffff
 8002b50:	fdffffff 	.word	0xfdffffff
 8002b54:	dfffffff 	.word	0xdfffffff

08002b58 <memset>:
 8002b58:	0003      	movs	r3, r0
 8002b5a:	1882      	adds	r2, r0, r2
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d100      	bne.n	8002b62 <memset+0xa>
 8002b60:	4770      	bx	lr
 8002b62:	7019      	strb	r1, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	e7f9      	b.n	8002b5c <memset+0x4>

08002b68 <__libc_init_array>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	4c0c      	ldr	r4, [pc, #48]	@ (8002ba0 <__libc_init_array+0x38>)
 8002b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ba4 <__libc_init_array+0x3c>)
 8002b70:	1b64      	subs	r4, r4, r5
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	42a6      	cmp	r6, r4
 8002b76:	d109      	bne.n	8002b8c <__libc_init_array+0x24>
 8002b78:	2600      	movs	r6, #0
 8002b7a:	f000 f819 	bl	8002bb0 <_init>
 8002b7e:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba8 <__libc_init_array+0x40>)
 8002b80:	4d0a      	ldr	r5, [pc, #40]	@ (8002bac <__libc_init_array+0x44>)
 8002b82:	1b64      	subs	r4, r4, r5
 8002b84:	10a4      	asrs	r4, r4, #2
 8002b86:	42a6      	cmp	r6, r4
 8002b88:	d105      	bne.n	8002b96 <__libc_init_array+0x2e>
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	00b3      	lsls	r3, r6, #2
 8002b8e:	58eb      	ldr	r3, [r5, r3]
 8002b90:	4798      	blx	r3
 8002b92:	3601      	adds	r6, #1
 8002b94:	e7ee      	b.n	8002b74 <__libc_init_array+0xc>
 8002b96:	00b3      	lsls	r3, r6, #2
 8002b98:	58eb      	ldr	r3, [r5, r3]
 8002b9a:	4798      	blx	r3
 8002b9c:	3601      	adds	r6, #1
 8002b9e:	e7f2      	b.n	8002b86 <__libc_init_array+0x1e>
 8002ba0:	08002c5c 	.word	0x08002c5c
 8002ba4:	08002c5c 	.word	0x08002c5c
 8002ba8:	08002c60 	.word	0x08002c60
 8002bac:	08002c5c 	.word	0x08002c5c

08002bb0 <_init>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr

08002bbc <_fini>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr
